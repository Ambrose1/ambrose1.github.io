<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Ambrose&#x27;s Blog</title>
    <link href="https://ambrose1.github.io/feed.xml" rel="self" />
    <link href="https://ambrose1.github.io" />
    <updated>2024-08-13T14:17:37+08:00</updated>
    <author>
        <name>Ambrose duan</name>
    </author>
    <id>https://ambrose1.github.io</id>

    <entry>
        <title>dispatch_source_xx 方法学习</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/dispatch_source_xx-fang-fa-xue-xi.html"/>
        <id>https://ambrose1.github.io/dispatch_source_xx-fang-fa-xue-xi.html</id>

        <updated>2024-08-13T14:17:08+08:00</updated>
            <summary>
                <![CDATA[
                    dispatch_source_set_event_handler dispatch_source_set_event_handler 是 Grand Central Dispatch (GCD) 框架中的一个函数，用于为 dispatch source 设置一个事件处理器。当特定的事件发生时，这个事件处理器会被调用。Dispatch source&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="dispatch_source_set_event_handler">dispatch_source_set_event_handler</h1>
<p><code>dispatch_source_set_event_handler</code> 是 Grand Central Dispatch (GCD) 框架中的一个函数，用于为 dispatch source 设置一个事件处理器。当特定的事件发生时，这个事件处理器会被调用。Dispatch source 是 GCD 中用于抽象化不同的系统事件的一个对象，它可以是基于各种不同事件的，比如文件描述符的读取或写入、Unix信号、定时器、文件系统事件等。</p><p>以下是 <code>dispatch_source_set_event_handler</code> 函数的一些关键点：</p><h3 id="函数原型">函数原型</h3>
<pre><code class="language-c">void dispatch_source_set_event_handler(dispatch_source_t source,
                                        dispatch_queue_t queue,
                                        dispatch_block_t handler);
</code></pre>
<h3 id="参数说明">参数说明</h3>
<ul>
<li><code>source</code>: 要设置事件处理器的 dispatch source 对象。</li>
<li><code>queue</code>: 指定在哪个 dispatch queue 上执行事件处理器。如果传入 <code>NULL</code>，将使用 source 创建时指定的队列。</li>
<li><code>handler</code>: 当 dispatch source 触发事件时调用的 block。这个 block 需要符合 <code>dispatch_block_t</code> 类型，没有参数并返回 <code>void</code>。</li>
</ul>
<h3 id="使用场景">使用场景</h3>
<ul>
<li><strong>文件 I/O</strong>: 当需要从文件描述符中读取数据或向其写入数据时，可以设置一个事件处理器来处理这些 I/O 操作。</li>
<li><strong>用户交互</strong>: 在用户与应用程序交互时，如按钮点击或手势识别，可以设置事件处理器以响应这些交互事件。</li>
<li><strong>定时任务</strong>: 除了使用 <code>dispatch_source_set_timer</code> 设置定时器，还可以设置一个事件处理器来处理每次定时器触发时的逻辑。</li>
<li><strong>系统事件</strong>: 对于一些系统级的事件，如电源变化、网络状态变化等，也可以设置事件处理器来响应这些事件。</li>
</ul>
<h3 id="示例代码">示例代码</h3>
<pre><code class="language-c">dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, fd, 0, queue);
dispatch_source_set_event_handler(source, ^{
    // 处理事件，例如读取数据
    size_t length = 1024;
    char buffer[length];
    ssize_t bytesRead = read(fd, &amp;buffer, length);
    if (bytesRead &gt; 0) {
        // 处理读取到的数据
    }
});
dispatch_source_set_cancel_handler(source, ^{
    close(fd); // 清理资源
});
</code></pre>
<p>在上面的示例代码中，我们创建了一个基于文件描述符读取的 dispatch source，并设置了一个事件处理器 block 来处理读取到的数据。同时，我们也设置了一个取消处理器，当 source 被取消时，执行清理操作（如关闭文件描述符）。</p><p><code>dispatch_source_set_event_handler</code> 提供了高度的灵活性和强大的功能，允许开发者在现代多核系统上有效地处理各种事件。</p><h1 id="hailuoai">hailuoai:</h1>
<p><code>dispatch_source_set_event_handler</code> 是一个函数，用于设置一个 <code>dispatch_source_t</code> 类型的事件源的事件处理函数。这个函数允许你定义当事件源触发事件时应该执行的操作。事件源可以是计时器、信号、描述符、进程或线程等。</p><h3 id="函数原型-1">函数原型</h3>
<pre><code class="language-c">void dispatch_source_set_event_handler(dispatch_source_t source, void (^handler)(void));
</code></pre>
<h3 id="参数说明-1">参数说明</h3>
<ul>
<li><code>source</code>: 这是一个 <code>dispatch_source_t</code> 类型的事件源，它代表了你想要监听的事件源。</li>
<li><code>handler</code>: 这是一个块（block），当事件源触发事件时，这个块将被调用执行。块中可以包含你希望在事件发生时执行的代码。</li>
</ul>
<h3 id="使用场景-1">使用场景</h3>
<p><code>dispatch_source_set_event_handler</code> 常用于以下场景：</p><ul>
<li><strong>计时器事件</strong>：当使用 <code>dispatch_source_create</code> 创建一个计时器事件源时，你可以使用 <code>dispatch_source_set_event_handler</code> 来设置一个块，该块将在计时器触发时执行。</li>
<li><strong>信号事件</strong>：当创建一个信号事件源时，你可以设置一个块来响应特定的信号。</li>
<li><strong>描述符事件</strong>：当创建一个描述符事件源时，你可以设置一个块来响应文件描述符的读写事件。</li>
<li><strong>进程和线程事件</strong>：当创建一个进程或线程事件源时，你可以设置一个块来响应进程或线程的结束。</li>
</ul>
<h3 id="能力说明">能力说明</h3>
<ul>
<li><strong>异步执行</strong>：事件处理函数在事件源触发时异步执行，这允许你的应用程序继续执行其他任务，而不会被阻塞。</li>
<li><strong>线程安全</strong>：事件处理函数在合适的线程上执行，通常是创建事件源时指定的队列上。</li>
<li><strong>可配置性</strong>：你可以通过 <code>dispatch_source_set_timer</code>、<code>dispatch_source_set_cancel_handler</code> 等函数来配置事件源的其他行为。</li>
</ul>
<h3 id="示例代码-1">示例代码</h3>
<pre><code class="language-c">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);

// 设置计时器触发的时间间隔
uint64_t start = dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC);
uint64_t interval = 1 * NSEC_PER_SEC;
dispatch_source_set_timer(timer, start, interval, 0);

// 设置事件处理函数
dispatch_source_set_event_handler(timer, ^{
    NSLog(@&quot;Timer fired!&quot;);
});

// 启动计时器
dispatch_resume(timer);
</code></pre>
<p>在这个示例中，我们创建了一个计时器事件源，它每秒触发一次，并在控制台打印一条消息。</p><p>使用 <code>dispatch_source_set_event_handler</code> 可以让你的应用程序响应各种事件源的事件，从而实现复杂的异步逻辑。</p><h1 id="dispatch_source_set_timer">dispatch_source_set_timer</h1>
<p>这段代码是苹果系统编程中使用 Grand Central Dispatch (GCD) 框架的一部分，具体是关于 <code>dispatch_source_set_timer</code> 函数的文档注释。</p><p>以下是对这个函数及其参数的简要解释：</p><h3 id="函数名称">函数名称</h3>
<ul>
<li><code>dispatch_source_set_timer</code></li>
</ul>
<h3 id="函数功能">函数功能</h3>
<ul>
<li>设置定时器源的开始时间、间隔和延迟（leeway）值。</li>
</ul>
<h3 id="讨论">讨论</h3>
<ul>
<li>函数返回后，之前定时器值累积的任何待处理源数据将被清除。</li>
<li>下一次定时器触发将在 <code>start</code> 时间发生，之后每隔 <code>interval</code> 纳秒触发，直到定时器源被取消。</li>
<li>系统可能会延迟定时器的触发以提高电源效率和系统性能。允许的最大延迟可以通过 <code>leeway</code> 参数配置，最小延迟由系统控制。</li>
<li>对于在 <code>start</code> 时间的初始定时器触发，允许的最大延迟设置为 <code>leeway</code> 纳秒。</li>
<li>对于在 <code>start</code> + N * <code>interval</code> 的后续定时器触发，最大延迟是 <code>leeway</code> 和 <code>interval</code>/2 的最小值。</li>
<li>如果定时器源是使用 <code>DISPATCH_TIMER_STRICT</code> 掩码创建的，系统将尽最大努力严格观察提供的 <code>leeway</code> 值，即使它小于当前的最小延迟限制。即使指定了此标志，也应预期会有最小的延迟。</li>
<li><code>start</code> 参数还决定了用于定时器的时钟：如果 <code>start</code> 是 <code>DISPATCH_TIME_NOW</code> 或使用 <code>dispatch_time(3)</code> 创建的，则定时器基于系统启动时间（在苹果平台上通过 <code>mach_absolute_time()</code> 获取）。如果 <code>start</code> 是使用 <code>dispatch_walltime(3)</code> 创建的，则定时器基于 <code>gettimeofday(3)</code>。</li>
<li>如果定时器源已经被取消，则调用此函数没有效果。</li>
</ul>
<h3 id="参数">参数</h3>
<ul>
<li><code>start</code>: 定时器的开始时间。有关更多信息，请参阅 <code>dispatch_time()</code> 和 <code>dispatch_walltime()</code>。</li>
<li><code>interval</code>: 定时器的纳秒间隔。对于一次性定时器，使用 <code>DISPATCH_TIME_FOREVER</code>。</li>
<li><code>leeway</code>: 定时器的纳秒延迟。</li>
</ul>
<h3 id="可用性">可用性</h3>
<ul>
<li>此函数在 macOS 10.6 和 iOS 4.0 及以上版本中可用。</li>
</ul>
<h3 id="其他属性">其他属性</h3>
<ul>
<li><code>DISPATCH_EXPORT</code>: 表示该函数是库的导出符号。</li>
<li><code>DISPATCH_NONNULL_ALL</code>: 表示函数的所有参数都不应为 NULL。</li>
<li><code>DISPATCH_NOTHROW</code>: 表示该函数不会抛出异常。</li>
<li><code>DISPATCH_REFINED_FOR_SWIFT</code>: 表示该函数经过优化，可以在 Swift 中使用。</li>
</ul>
<p>这个函数是 GCD 框架中用于定时任务调度的重要工具，允许开发者在应用程序中实现精确的定时触发逻辑。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>iOS 包体积编译配置优化遇到的一些问题</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/ios-bao-ti-ji-bian-yi-pei-zhi-you-hua-yu-dao-de-yi-xie-wen-ti.html"/>
        <id>https://ambrose1.github.io/ios-bao-ti-ji-bian-yi-pei-zhi-you-hua-yu-dao-de-yi-xie-wen-ti.html</id>

        <updated>2024-08-13T11:00:35+08:00</updated>
            <summary>
                <![CDATA[
                    Xcode 改包体积相关编译配置项之前和改之后包体积没有任何变化，使用本地Achive的方式产出包，可能有什么原因 调研ing…
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="xcode-改包体积相关编译配置项之前和改之后包体积没有任何变化，使用本地achive的方式产出包，可能有什么原因">Xcode 改包体积相关编译配置项之前和改之后包体积没有任何变化，使用本地Achive的方式产出包，可能有什么原因</h1>
<p>调研ing…</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>iOS 报错处理</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/ios-bao-cuo-chu-li.html"/>
        <id>https://ambrose1.github.io/ios-bao-cuo-chu-li.html</id>

        <updated>2024-08-13T10:27:01+08:00</updated>
            <summary>
                <![CDATA[
                    xcode 编译报错Build service could not create build operation: Build service could not&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="xcode-编译报错build-service-could-not-create-build-operation">xcode 编译报错Build service could not create build operation:</h1>
<p>Build service could not create build operation: unknown error while handling message: MsgHandlingError(message: “unable to initiate PIF transfer session (operation in progress?)”)
解决方案：重启xcode</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>iOS包体积 无用代码监测</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/iosbao-ti-ji-wu-yong-dai-ma-jian-ce.html"/>
        <id>https://ambrose1.github.io/iosbao-ti-ji-wu-yong-dai-ma-jian-ce.html</id>

        <updated>2024-07-29T19:28:13+08:00</updated>
            <summary></summary>
        <content></content>
    </entry>
    <entry>
        <title>每日信息差</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/mei-ri-xin-xi-chai.html"/>
        <id>https://ambrose1.github.io/mei-ri-xin-xi-chai.html</id>

        <updated>2024-07-29T09:30:42+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <figure class="post__image"><img loading="lazy" src="https://ambrose1.github.io/mei-ri-xin-xi-chai.html" alt="目录测试"  data-is-external-image="true"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>软件设计师备考</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/ruan-jian-she-ji-shi-bei-kao.html"/>
        <id>https://ambrose1.github.io/ruan-jian-she-ji-shi-bei-kao.html</id>

        <updated>2024-07-29T09:30:20+08:00</updated>
            <summary>
                <![CDATA[
                    考试信息 考试时间：5、11月 考试形式： 1. 上午-选择题目 2. 下午简答题。 3. 满分75-45通过。 4. 机考
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="考试信息">考试信息</h1>
<ul>
<li>考试时间：5、11月</li>
<li>考试形式：
      1. 上午-选择题目<br>      2. 下午简答题。
      3. 满分75-45通过。
      4. 机考</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Ruby 开发规范</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/ruby-kai-fa-gui-fan.html"/>
        <id>https://ambrose1.github.io/ruby-kai-fa-gui-fan.html</id>
            <category term="Ruby"/>

        <updated>2024-07-26T16:52:28+08:00</updated>
            <summary>
                <![CDATA[
                    Favor modifier if usage when having a single-line body. Another good alternative&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ol>
<li>Favor modifier <code>if</code> usage when having a single-line body. Another good alternative is the usage of control flow <code>&amp;&amp;</code>/<code>||</code>.</li>
</ol>
<p>判断条件的body只有一行时，建议这样写：</p><pre><code class="language-ruby">something() if condition
</code></pre>
<p>2</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>iOS 包体积治理~编译配置</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/bao-ti-ji-shou-shen.html"/>
        <id>https://ambrose1.github.io/bao-ti-ji-shou-shen.html</id>
            <category term="iOS"/>

        <updated>2024-07-26T14:50:11+08:00</updated>
            <summary>
                <![CDATA[
                    编译配置，pod库搜不到的项都是继承壳工程的。 改打包配置一般都是所以target继承自壳工程，所以一般改配置都是在壳工程修改。 一般公司的打包机器，打测试包都不会修改打包机的壳工程配置，做修改也不能直接线上集成测试，所以可以自己在本地xcode Arechive 包。 自己Archive记得清理构建文件夹。 不确定是否带上了修改后的配置，可以使用命令构建包： xcodebuild -project path/to/OpenDriver.xcodeproj -scheme OpenDriver&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ol>
<li>编译配置，pod库搜不到的项都是继承壳工程的。</li>
<li>改打包配置一般都是所以target继承自壳工程，所以一般改配置都是在壳工程修改。</li>
<li>一般公司的打包机器，打测试包都不会修改打包机的壳工程配置，做修改也不能直接线上集成测试，所以可以自己在本地xcode Arechive 包。</li>
<li>自己Archive记得清理构建文件夹。</li>
</ol>
<p>不确定是否带上了修改后的配置，可以使用命令构建包：</p><pre><code>xcodebuild -project path/to/OpenDriver.xcodeproj -scheme OpenDriver -sdk iphoneos -archivePath path/to/OpenDriver.xcarchive -configuration Release clean build
</code></pre>
<p>如果你不需要考虑模拟器，而是想要直接构建并安装到真实设备上，你可以省略与模拟器相关的参数。以下是一个针对真实设备的 <code>xcodebuild</code> 命令示例，同时使用了 <code>--repo-update</code> 参数：</p><pre><code class="language-bash">xcodebuild -project MyApp.xcodeproj -scheme MyApp -destination &#39;generic/platform=iOS&#39; -configuration Release clean build install --repo-update
</code></pre>
<p>在这个命令中：</p><ul>
<li><code>-destination &#39;generic/platform=iOS&#39;</code>：指定目标平台为 iOS，不指定具体设备，这样构建出的包可以安装到任何连接的 iOS 设备上。</li>
<li>其他参数与之前相同，包括项目文件、scheme、构建配置、清理和构建操作，以及 <code>--repo-update</code> 参数用于更新依赖。</li>
</ul>
<p>请注意，为了在真实设备上安装应用，你需要有一个有效的开发者账号，并且设备需要注册到你的 Apple 开发者账号下，并且处于信任状态。</p><p>在执行这个命令之前，确保你的设备已经连接到电脑，并且在 Xcode 中被识别。此外，你可能需要在设备上手动信任开发者证书。</p><p>如果你的项目使用了其他依赖管理工具，确保在执行 <code>xcodebuild</code> 命令之前，先手动更新这些依赖，或者在构建脚本中加入相应的更新步骤。</p><h3 id="xcworkspace">xcworkspace</h3>
<p>如果你的项目使用了 CocoaPods 或其他依赖管理工具，并且这些依赖被整合到了一个 <code>.xcworkspace</code> 文件中，那么在使用 <code>xcodebuild</code> 命令时，你需要指定 <code>.xcworkspace</code> 而不是 <code>.xcodeproj</code> 文件。这是因为 <code>.xcworkspace</code> 包含了项目文件和所有依赖的配置。</p><p>例如，如果你的项目名为 <code>MyApp</code>，并且你使用了 CocoaPods，那么你应该使用以下命令：</p><pre><code class="language-bash">xcodebuild -workspace MyApp.xcworkspace -scheme MyApp -destination &#39;generic/platform=iOS&#39; -configuration Release clean build install --repo-update
</code></pre>
<p>在这个命令中：</p><ul>
<li><code>-workspace MyApp.xcworkspace</code>：指定工作空间文件，而不是项目文件。这确保了所有依赖项都被正确加载。</li>
<li>其他参数与之前相同，包括 scheme、目标平台、构建配置、清理和构建操作，以及 <code>--repo-update</code> 参数用于更新依赖。</li>
</ul>
<p>如果你的项目没有使用 <code>.xcworkspace</code>，或者你没有使用任何依赖管理工具，那么你可以继续使用 <code>.xcodeproj</code> 文件。</p><p>请记住，使用 <code>.xcworkspace</code> 是在项目中使用了依赖管理工具（如 CocoaPods、Carthage 等）时的常见做法，它确保了所有依赖项都被正确地集成到 Xcode 项目中。如果你的项目没有使用这些工具，那么你只需要关注 <code>.xcodeproj</code> 文件即可。</p><p>调整完编译配置，没有任何效果，未知原因待确定。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>关于如何下载appStore 包</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/guan-yu-ru-he-xia-zai-appstore-bao.html"/>
        <id>https://ambrose1.github.io/guan-yu-ru-he-xia-zai-appstore-bao.html</id>
            <category term="iOS"/>

        <updated>2024-07-26T14:37:27+08:00</updated>
            <summary>
                <![CDATA[
                    libimobiledevice 不越狱操作iphone安装包，查看设备信息，安装包信息，备份。 brew tap majd/repo brew install ipatool 登录： ipatool auth login&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><strong>libimobiledevice</strong> 不越狱操作iphone安装包，查看设备信息，安装包信息，备份。</p><pre><code>brew tap majd/repo
brew install ipatool
</code></pre>
<p>登录：</p><pre><code>ipatool auth login -e &quot;邮箱&quot; -p &quot;密码&quot;
</code></pre>
<p>需要输入设备上提示的二次确认6位数字密码</p><pre><code>ipatool search --limit 1 花小猪打车
</code></pre>
<p>购买许可：</p><pre><code>ipatool purchase --bundle-identifier com.kfhuaxiaozhu.driver
</code></pre>
<p>下载</p><pre><code>ipatool download --bundle-identifier com.kfhuaxiaozhu.driver --output kfdirver.ipa
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Ambrose&#x27;s blog</title>
        <author>
            <name>Ambrose duan</name>
        </author>
        <link href="https://ambrose1.github.io/ambroses-blog.html"/>
        <id>https://ambrose1.github.io/ambroses-blog.html</id>

        <updated>2024-07-26T14:24:14+08:00</updated>
            <summary>
                <![CDATA[
                    hi! Ambrose Dyx will be recording all learning tasks here…
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>hi! Ambrose Dyx will be recording all learning tasks here…</p>
            ]]>
        </content>
    </entry>
</feed>
